knitr::opts_chunk$set(echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE)
packages = c( 'tidyverse','sf', 'spdep', 'tmap','rgdal','dplyr')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
#knitr::opts_chunk$set(echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE)
packages = c( 'tidyverse','sf', 'spdep', 'tmap','rgdal','dplyr')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
customers_dataset <- read_csv("data/aspatial/olist_customers_dataset.csv")
geolocation_dataset <- read_csv("data/aspatial/olist_geolocation_dataset.csv")
order_items_dataset <- read_csv("data/aspatial/olist_order_items_dataset.csv")
orders_dataset <- read_csv("data/aspatial/olist_orders_dataset.csv")
RMSP_sf <- st_read(dsn = "data/spatial",
layer="RMSP_adm3")
summary(RMSP_sf)
head(RMSP_sf, n=4)
RMSP_sf$ID_3 <- as.factor(RMSP_sf$ID_3)
str(RMSP_sf)
RMSP_sf_final <- st_transform(RMSP_sf, 5880)
st_crs(RMSP_sf_final)
head(RMSP_sf_final, n=4)
head(geolocation_dataset, n=50)
filtered_location <- geolocation_dataset %>%
select("geolocation_zip_code_prefix","geolocation_lat","geolocation_lng")
#as there are multiple geolocation_lat and geolocation_lng with the same zip code prefix, we use mean to calculate the average values
filtered_location <- aggregate(.~geolocation_zip_code_prefix, filtered_location, FUN = mean)
#Convert the filtered location to sf spatial dataframe and set the CRS to 5880 subsequently
filtered_location_sf <- st_as_sf(filtered_location, coords = c("geolocation_lng","geolocation_lat"), crs=4326) %>%
st_transform(crs=5880)
head(filtered_location_sf, n=4)
st_crs(filtered_location_sf)
class(filtered_location_sf)
head(filtered_location_sf, n=4)
#RMSP_sf_final <- st_as_sf(RMSP_sf_final)
#st_crs(RMSP_sf_final)
final_filtered_location <- st_join(RMSP_sf_final, filtered_location_sf, join= st_intersects)
summary(final_filtered_location)
#final_filtered_location_group <- final_filtered_location %>% group_by(geolocation_zip_code_prefix) %>%
# summarise(district_id = sample(ID_3, 1), district_name = sample(NAME_3,1), geometry =sample(geometry,1))
final_filtered_location_group = subset(final_filtered_location, select = c("ID_2","NAME_2","ID_3", "NAME_3", "geolocation_zip_code_prefix", "geometry" ))
final_filtered_location_group <- na.omit(final_filtered_location_group, cols="geolocation_zip_code_prefix")
str(final_filtered_location_group)
customers_geolocation_dataset <- inner_join(final_filtered_location_group, customers_dataset, by = c("geolocation_zip_code_prefix"="customer_zip_code_prefix"))
#customers_geolocation_dataset.sf <- st_as_sf(customers_geolocation_dataset, sf_column_name = "geometry", crs=5880)
st_crs(customers_geolocation_dataset)
orders_dataset_2017 <- orders_dataset %>%
filter(order_delivered_customer_date >= as.POSIXct('2017-01-01 00:00:00') &  order_delivered_customer_date < as.POSIXct('2018-01-01 00:00:00')) %>%
select(order_id, customer_id,order_delivered_customer_date)
orders_dataset_2017
colnames(order_items_dataset)
#Calculate the frequency for each order id to obtain the number of items purchased
order_items_datasetV2 <-
order_items_dataset %>%
group_by(order_id) %>%
tally()
#Filter out order_item_id = 1 for original order_items_dataset
order_items_datasetV3 <- order_items_dataset %>%
filter(order_item_id == 1)
#Merge new v2 dataset via left_join with v3
order_items_datasetV4 <-left_join(order_items_datasetV2, order_items_datasetV3, by =c("order_id" = "order_id"))
#Create new column Total Sale
order_items_datasetV4$Total_Sale <- order_items_datasetV4$price * order_items_datasetV4$n
#Create new column Total Freight Value
order_items_datasetV4$Total_Freight_Value <- order_items_datasetV4$freight_value * order_items_datasetV4$n
#Keep selected columns
order_items_datasetV5 <- order_items_datasetV4 %>% select(order_id,Total_Sale,Total_Freight_Value)
order_items_dataset_2017<-inner_join(orders_dataset_2017,order_items_datasetV5, by = c("order_id"="order_id"))
#innermerge with customers dataset
order_items_location_2017 <- inner_join(order_items_dataset_2017, customers_geolocation_dataset, by = c("customer_id"="customer_id"))
head(order_items_location_2017, n=4)
summary(order_items_location_2017)
str(order_items_location_2017)
finalcombine <- order_items_location_2017 %>% group_by(ID_3,NAME_3) %>%
summarise(total_transaction_number = n(),
final_total_sale = sum(Total_Sale),
final_total_freight = sum(Total_Freight_Value),
average_sales_per_transaction = final_total_sale/total_transaction_number,
average_freight_values_per_transaction = final_total_freight/total_transaction_number,
geometry = sample(geometry,1))
#Import Shapefile into R Environment
map <- readOGR(dsn = "data/spatial", layer = "RMSP_adm3")
#Performing relational join
map@data <- left_join(map@data,finalcombine)
#Convert Columns with NA to 0 Values
map@data$total_transaction_number[is.na(map@data$total_transaction_number)] <- 0
map@data$final_total_sale[is.na(map@data$final_total_sale)] <- 0
map@data$final_total_freight[is.na(map@data$final_total_freight)] <- 0
map@data$average_sales_per_transaction[is.na(map@data$average_sales_per_transaction)] <- 0
map@data$average_freight_values_per_transaction[is.na(map@data$average_freight_values_per_transaction)] <- 0
qtm(map,"total_transaction_number", text="ID_3", text.size = 0.5)
wm_q <- poly2nb(map, queen=TRUE)
summary(wm_q)
plot(map, border="lightgrey")
plot(wm_q, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col= "red")
wm_r <- poly2nb(map, queen=FALSE)
summary(wm_r)
plot(map, border="lightgrey")
plot(wm_r, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
coords <- coordinates(map)
wm_knn1 <- knn2nb(knearneigh(coords, k=1), row.names=row.names(map$total_transaction_number))
wm_knn2 <- knn2nb(knearneigh(coords, k=2), row.names=row.names(map$total_transaction_number))
wm_knn4 <- knn2nb(knearneigh(coords, k=4), row.names=row.names(map$total_transaction_number))
plot(map, border="lightgrey")
plot(wm_knn1, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
plot(map, border="lightgrey")
plot(wm_knn2, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
plot(map, border="lightgrey")
plot(wm_knn4, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
dist <- nbdists(wm_q, coordinates(map))
idw <- lapply(dist, function(x) 1/(x/1000))
idw_q <- nb2listw(wm_q, glist=idw, style="B", zero.policy=TRUE)
summary(unlist(idw_q$weights))
summary(idw_q)
plot(map, border="lightgrey")
plot(idw_q, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
summary(rswm_q)
plot(map, border="lightgrey")
plot(rswm_q, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
rswm_r <- nb2listw(wm_r, style="W", zero.policy = TRUE)
summary(rswm_r)
plot(map, border="lightgrey")
plot(rswm_r, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
rswm_knn4 <- nb2listw(wm_knn4, style="W", zero.policy = TRUE)
summary(rswm_knn4)
plot(map, border="lightgrey")
plot(rswm_knn4, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
coords <- coordinates(map)
knb <- knn2nb(knearneigh(coords, k=8, longlat = TRUE),
row.names=row.names(map$total_transaction_number))
knb_lw <- nb2listw(knb, style = 'B')
summary(knb_lw)
plot(map, border="lightgrey")
plot(knb, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
fips <- order(map$NAME_3)
localMI <- localmoran(map$total_transaction_number, knb_lw)
head(localMI)
printCoefmat(data.frame(localMI[fips,], row.names=map$NAME_3[fips]),
check.names=FALSE)
nci <- moran.plot(map$total_transaction_number, knb_lw, labels=as.character(map$NAME_3),
xlab="Total Transaction Number", ylab="Spatially Lag Total Transaction Number")
#Append the local Moran's I dataframe onto hunan SpatialPOlygon DataFrame
map.localMI <- cbind(map,localMI)
localMI.map <- tm_shape(map.localMI) +
tm_fill(col = "Ii",
style = "pretty",
title = "local moran statistics") +
tm_borders(alpha = 0.5)
pvalue.map <- tm_shape(map.localMI) +
tm_fill(col = "Pr.z...0.",
breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
palette="-Blues",
title = "local Moran's I p-vaiues") +
tm_borders(alpha = 0.5)
tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
localMI.map <- tm_shape(map.localMI) +
tm_fill(col = "Ii",
style = "pretty",
title = "local moran statistics") +
tm_borders(alpha = 0.5)
pvalue.map <- tm_shape(map.localMI) +
tm_fill(col = "Pr.z...0.",
breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
palette="-Blues",
title = "local Moran's I p-vaiues") +
tm_borders(alpha = 0.5)
tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
quadrant <- vector(mode="numeric",length=nrow(localMI))
DV <- map$total_transaction_number - mean(map$total_transaction_number)
C_mI <- localMI[,1] - mean(localMI[,1])
signif <- 0.05
quadrant[DV >0 & C_mI>0] <- 4
quadrant[DV <0 & C_mI<0] <- 1
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMI[,5]>signif] <- 0
map.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "highhigh")
tm_shape(map.localMI) +
tm_fill(col = "quadrant", style = "cat", palette =
colors[c(sort(unique(quadrant)))+1], labels =
clusters[c(sort(unique(quadrant)))+1], popup.vars = c("Postal.Code")) +
tm_view(set.zoom.limits = c(11,17)) +
tm_borders(alpha=0.5)
fips <- order(map$NAME_3)
gi.adaptive <- localG(map$total_transaction_number, knb_lw)
map.gi <- cbind(map, as.matrix(gi.adaptive))
names(map.gi)[22] <- "gstat_adaptive"
tm_shape(map.gi) +
tm_fill(col = "gstat_adaptive",
style = "pretty",
palette = "-RdBu",
title = "local Gi") +
tm_borders(alpha = 0.5)
qtm(map,"final_total_sale", text="ID_3", text.size = 0.5)
coords <- coordinates(map)
knbsale <- knn2nb(knearneigh(coords, k=8, longlat = TRUE),
row.names=row.names(map$final_total_sale))
knbsale_lw <- nb2listw(knbsale, style = 'B')
summary(knbsale_lw)
plot(map, border="lightgrey")
plot(knbsale, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
fips <- order(map$NAME_3)
localMIsale <- localmoran(map$final_total_sale, knbsale_lw)
head(localMIsale)
printCoefmat(data.frame(localMIsale[fips,], row.names=map$NAME_3[fips]),
check.names=FALSE)
nci <- moran.plot(map$final_total_sale, knbsale_lw, labels=as.character(map$NAME_3),
xlab="Total Sales Values", ylab="Spatially Lag Total Sales Values")
#Append the local Moran's I dataframe onto hunan SpatialPOlygon DataFrame
map.localMIsale <- cbind(map,localMIsale)
localMIsale.map <- tm_shape(map.localMIsale) +
tm_fill(col = "Ii",
style = "pretty",
title = "local moran statistics") +
tm_borders(alpha = 0.5)
pvalue.map <- tm_shape(map.localMIsale) +
tm_fill(col = "Pr.z...0.",
breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
palette="-Blues",
title = "local Moran's I p-vaiues") +
tm_borders(alpha = 0.5)
tmap_arrange(localMIsale.map, pvalue.map, asp=1, ncol=2)
quadrant <- vector(mode="numeric",length=nrow(localMIsale))
DV <- map$final_total_sale - mean(map$final_total_sale)
C_mI <- localMIsale[,1] - mean(localMIsale[,1])
signif <- 0.05
quadrant[DV >0 & C_mI>0] <- 4
quadrant[DV <0 & C_mI<0] <- 1
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMIsale[,5]>signif] <- 0
map.localMIsale$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "highhigh")
tm_shape(map.localMIsale) +
tm_fill(col = "quadrant", style = "cat", palette =
colors[c(sort(unique(quadrant)))+1], labels =
clusters[c(sort(unique(quadrant)))+1], popup.vars = c("Postal.Code")) +
tm_view(set.zoom.limits = c(11,17)) +
tm_borders(alpha=0.5)
fips <- order(map$NAME_3)
gi.adaptive <- localG(map$final_total_sale, knbsale_lw)
map.gi <- cbind(map, as.matrix(gi.adaptive))
names(map.gi)[22] <- "gstat_adaptive"
tm_shape(map.gi) +
tm_fill(col = "gstat_adaptive",
style = "pretty",
palette = "-RdBu",
title = "local Gi Total Sales Values") +
tm_borders(alpha = 0.5)
qtm(map,"final_total_freight", text="ID_3", text.size = 0.5)
coords <- coordinates(map)
knbfreight <- knn2nb(knearneigh(coords, k=8, longlat = TRUE),
row.names=row.names(map$final_total_freight))
knbfreight_lw <- nb2listw(knbfreight, style = 'B')
summary(knbfreight_lw)
plot(map, border="lightgrey")
plot(knbfreight, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
fips <- order(map$NAME_3)
localMIfreight <- localmoran(map$final_total_freight, knbfreight_lw)
head(localMIfreight)
printCoefmat(data.frame(localMIfreight[fips,], row.names=map$NAME_3[fips]),
check.names=FALSE)
nci <- moran.plot(map$final_total_freight, knbfreight_lw, labels=as.character(map$NAME_3),
xlab="Total Freight Values", ylab="Spatially Lag Total Freight Values")
#Append the local Moran's I dataframe onto hunan SpatialPOlygon DataFrame
map.localMIfreight <- cbind(map,localMIfreight)
localMIfreight.map <- tm_shape(map.localMIfreight) +
tm_fill(col = "Ii",
style = "pretty",
title = "local moran statistics") +
tm_borders(alpha = 0.5)
pvalue.map <- tm_shape(map.localMIfreight) +
tm_fill(col = "Pr.z...0.",
breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
palette="-Blues",
title = "local Moran's I p-vaiues") +
tm_borders(alpha = 0.5)
tmap_arrange(localMIfreight.map, pvalue.map, asp=1, ncol=2)
quadrant <- vector(mode="numeric",length=nrow(localMIfreight))
DV <- map$final_total_freight - mean(map$final_total_freight)
C_mI <- localMIfreight[,1] - mean(localMIfreight[,1])
signif <- 0.05
quadrant[DV >0 & C_mI>0] <- 4
quadrant[DV <0 & C_mI<0] <- 1
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMIfreight[,5]>signif] <- 0
map.localMIfreight$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "highhigh")
tm_shape(map.localMIfreight) +
tm_fill(col = "quadrant", style = "cat", palette =
colors[c(sort(unique(quadrant)))+1], labels =
clusters[c(sort(unique(quadrant)))+1], popup.vars = c("Postal.Code")) +
tm_view(set.zoom.limits = c(11,17)) +
tm_borders(alpha=0.5)
fips <- order(map$NAME_3)
gi.adaptive <- localG(map$final_total_freight, knbfreight_lw)
map.gi <- cbind(map, as.matrix(gi.adaptive))
names(map.gi)[22] <- "gstat_adaptive"
tm_shape(map.gi) +
tm_fill(col = "gstat_adaptive",
style = "pretty",
palette = "-RdBu",
title = "local Gi Total Freight Values") +
tm_borders(alpha = 0.5)
qtm(map,"average_sales_per_transaction", text="ID_3", text.size = 0.5)
coords <- coordinates(map)
knbsalesavg <- knn2nb(knearneigh(coords, k=8, longlat = TRUE),
row.names=row.names(map$average_sales_per_transaction))
knbsalesavg_lw <- nb2listw(knbsalesavg, style = 'B')
summary(knbsalesavg_lw)
plot(map, border="lightgrey")
plot(knbsalesavg, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
fips <- order(map$NAME_3)
localMISalesAvg <- localmoran(map$average_sales_per_transaction, knbsalesavg_lw)
head(localMISalesAvg)
printCoefmat(data.frame(localMISalesAvg[fips,], row.names=map$NAME_3[fips]),
check.names=FALSE)
#Append the local Moran's I dataframe onto hunan SpatialPOlygon DataFrame
map.localMISalesAvg <- cbind(map,localMISalesAvg)
localMISalesAvg.map <- tm_shape(map.localMISalesAvg) +
tm_fill(col = "Ii",
style = "pretty",
title = "local moran statistics") +
tm_borders(alpha = 0.5)
pvalue.map <- tm_shape(map.localMISalesAvg) +
tm_fill(col = "Pr.z...0.",
breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
palette="-Blues",
title = "local Moran's I p-vaiues") +
tm_borders(alpha = 0.5)
tmap_arrange(localMISalesAvg.map, pvalue.map, asp=1, ncol=2)
quadrant <- vector(mode="numeric",length=nrow(localMISalesAvg))
DV <- map$average_sales_per_transaction - mean(map$average_sales_per_transaction)
C_mI <- localMISalesAvg[,1] - mean(localMISalesAvg[,1])
signif <- 0.05
quadrant[DV >0 & C_mI>0] <- 4
quadrant[DV <0 & C_mI<0] <- 1
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMISalesAvg[,5]>signif] <- 0
map.localMISalesAvg$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "highhigh")
tm_shape(map.localMISalesAvg) +
tm_fill(col = "quadrant", style = "cat", palette =
colors[c(sort(unique(quadrant)))+1], labels =
clusters[c(sort(unique(quadrant)))+1], popup.vars = c("Postal.Code")) +
tm_view(set.zoom.limits = c(11,17)) +
tm_borders(alpha=0.5)
fips <- order(map$NAME_3)
gi.adaptive <- localG(map$average_sales_per_transaction, knbsalesavg_lw)
map.gi <- cbind(map, as.matrix(gi.adaptive))
names(map.gi)[22] <- "gstat_adaptive"
fips <- order(map$NAME_3)
gi.adaptive <- localG(map$average_sales_per_transaction, knbsalesavg_lw)
map.gi <- cbind(map, as.matrix(gi.adaptive))
names(map.gi)[22] <- "gstat_adaptive"
tm_shape(map.gi) +
tm_fill(col = "gstat_adaptive",
style = "pretty",
palette = "-RdBu",
title = "local Gi Average Sales Values") +
tm_borders(alpha = 0.5)
qtm(map,"average_freight_values_per_transaction", text="ID_3", text.size = 0.5)
coords <- coordinates(map)
knbfreightavg <- knn2nb(knearneigh(coords, k=8, longlat = TRUE),
row.names=row.names(map$average_freight_values_per_transaction))
knbfreightavg_lw <- nb2listw(knbfreightavg, style = 'B')
summary(knbfreightavg_lw)
plot(map, border="lightgrey")
plot(knbfreightavg, coordinates(map), pch = 19, cex = 0.6, add = TRUE, col = "red")
fips <- order(map$NAME_3)
localMIFreightAvg <- localmoran(map$average_freight_values_per_transaction, knbfreightavg_lw)
head(localMIFreightAvg)
printCoefmat(data.frame(localMIFreightAvg[fips,], row.names=map$NAME_3[fips]),
check.names=FALSE)
nci <- moran.plot(map$average_freight_values_per_transaction, knbfreightavg_lw, labels=as.character(map$NAME_3),
xlab="Average Freight Values", ylab="Spatially Lag Average Freight Values")
#Append the local Moran's I dataframe onto hunan SpatialPOlygon DataFrame
map.localMIFreightAvg <- cbind(map,localMIFreightAvg)
localMIFreightAvg.map <- tm_shape(map.localMIFreightAvg) +
tm_fill(col = "Ii",
style = "pretty",
title = "local moran statistics") +
tm_borders(alpha = 0.5)
pvalue.map <- tm_shape(map.localMIFreightAvg) +
tm_fill(col = "Pr.z...0.",
breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
palette="-Blues",
title = "local Moran's I p-vaiues") +
tm_borders(alpha = 0.5)
tmap_arrange(localMIFreightAvg.map, pvalue.map, asp=1, ncol=2)
quadrant <- vector(mode="numeric",length=nrow(localMIFreightAvg))
DV <- map$average_freight_values_per_transaction - mean(map$average_freight_values_per_transaction)
C_mI <- localMIFreightAvg[,1] - mean(localMIFreightAvg[,1])
signif <- 0.05
quadrant[DV >0 & C_mI>0] <- 4
quadrant[DV <0 & C_mI<0] <- 1
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMIFreightAvg[,5]>signif] <- 0
map.localMIFreightAvg$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "highhigh")
tm_shape(map.localMIFreightAvg) +
tm_fill(col = "quadrant", style = "cat", palette =
colors[c(sort(unique(quadrant)))+1], labels =
clusters[c(sort(unique(quadrant)))+1], popup.vars = c("Postal.Code")) +
tm_view(set.zoom.limits = c(11,17)) +
tm_borders(alpha=0.5)
fips <- order(map$NAME_3)
gi.adaptive <- localG(map$average_freight_values_per_transaction, knbfreightavg_lw)
map.gi <- cbind(map, as.matrix(gi.adaptive))
names(map.gi)[22] <- "gstat_adaptive"
tm_shape(map.gi) +
tm_fill(col = "gstat_adaptive",
style = "pretty",
palette = "-RdBu",
title = "local Gi Average Sales Values") +
tm_borders(alpha = 0.5)
